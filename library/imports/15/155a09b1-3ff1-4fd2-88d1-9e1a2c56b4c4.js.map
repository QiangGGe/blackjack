{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [
    "Game",
    "require",
    "Types",
    "Utils",
    "ActorPlayingState",
    "cc",
    "Class",
    "extends",
    "Component",
    "properties",
    "playerInfo",
    "Node",
    "stakeOnTable",
    "cardInfo",
    "cardPrafab",
    "Prefab",
    "anchorCards",
    "spPlayerName",
    "Sprite",
    "labelPlayerName",
    "Label",
    "labelTotalStake",
    "spPlayerPhoto",
    "callCounter",
    "ProgressBar",
    "labelStakeOnTable",
    "spChips",
    "default",
    "type",
    "labelCardInfo",
    "spCardInfo",
    "animFX",
    "cardSpace",
    "onLoad",
    "init",
    "playerInfoPos",
    "stakePos",
    "turnDuration",
    "switchSide",
    "actor",
    "getComponent",
    "isCounting",
    "counterTimer",
    "position",
    "string",
    "name",
    "updateTotalStake",
    "gold",
    "photoIdx",
    "spriteFrame",
    "instance",
    "assetMng",
    "playerPhotos",
    "show",
    "active",
    "update",
    "dt",
    "progress",
    "initDealer",
    "num",
    "startCountdown",
    "resetCountdown",
    "playBlackJackFX",
    "playFX",
    "playBustFX",
    "onDeal",
    "card",
    "newCard",
    "instantiate",
    "addChild",
    "node",
    "reveal",
    "startPos",
    "p",
    "index",
    "cards",
    "length",
    "endPos",
    "setPosition",
    "_updatePointPos",
    "x",
    "moveAction",
    "moveTo",
    "callback",
    "callFunc",
    "_onDealEnd",
    "runAction",
    "sequence",
    "target",
    "state",
    "Normal",
    "updatePoint",
    "onReset",
    "removeAllChildren",
    "_resetChips",
    "onRevealHoldCard",
    "find",
    "updateState",
    "bestPoint",
    "hand",
    "Hand",
    "BlackJack",
    "FiveCard",
    "xPos",
    "showStakeChips",
    "stake",
    "chips",
    "count",
    "i",
    "enabled",
    "Active",
    "texCardInfo",
    "Bust",
    "min",
    "getMinMaxPoint",
    "texBust",
    "Stand",
    "max"
  ],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "var Game = require('Game');\nvar Types = require('Types');\nvar Utils = require('Utils');\nvar ActorPlayingState = Types.ActorPlayingState;//手中牌的状态\n\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n       playerInfo: cc.Node,//玩家信息节点\n        stakeOnTable: cc.Node,//玩家筹码托盘节点\n        cardInfo: cc.Node,\n        cardPrafab: cc.Prefab,\n        anchorCards: cc.Node,\n        spPlayerName: cc.Sprite,\n        labelPlayerName: cc.Label,//玩家名字节点\n        labelTotalStake: cc.Label,\n        spPlayerPhoto: cc.Sprite,//玩家头像节点\n        callCounter: cc.ProgressBar,\n        labelStakeOnTable: cc.Label,\n        spChips: {\n           default: [],\n            type: cc.Sprite\n        },\n        labelCardInfo: cc.Label,\n        spCardInfo: cc.Sprite,\n        animFX: cc.Node,\n        cardSpace: 0\n    },\n\n    // use this for initialization\n    onLoad: function () {\n\n    },\n\n    init: function (playerInfo, playerInfoPos, stakePos, turnDuration, switchSide) {\n        this.actor = this.getComponent('Actor');\n\n        this.isCounting = false;\n        this.counterTimer = 0;\n        this.turnDuration = turnDuration;\n\n        //玩家头像位置\n        this.playerInfo.position = playerInfoPos;\n        //玩家筹码位置\n        this.stakeOnTable.position = stakePos;\n        //玩家名字\n        this.labelPlayerName.string = playerInfo.name;\n        //根据数据更新对应玩家的钱币总数\n        this.updateTotalStake(playerInfo.gold);\n        var photoIdx = playerInfo.photoIdx % 5;//取0-4 的玩家头像资源id\n        this.spPlayerPhoto.spriteFrame = Game.instance.assetMng.playerPhotos[photoIdx];\n\n        //玩家节点上的动画\n        this.animFX = this.animFX.getComponent('FXPlayer');\n        this.animFX.init();\n        this.animFX.show(false);\n\n        //爆牌卡片\n        this.cardInfo.active = false;\n\n        //从第四个玩家开始需要调整UI位置 UI位置取反\n        if (switchSide){\n            this.spCardInfo.getComponent('SideSwitcher').switchSide();\n            this.spPlayerName.getComponent('SideSwitcher').switchSide();\n        }\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function (dt) {\n        if (this.isCounting){\n            this.callCounter.progress = this.counterTimer/this.turnDuration;\n            this.counterTimer += dt;\n            if (this.counterTimer >= this.turnDuration){\n                this.isCounting = false;\n                this.callCounter.progress = 1;\n            }\n        }\n    },\n\n    //初始化发牌人\n    initDealer: function () {\n        //\n        this.actor = this.getComponent('Actor');\n\n        this.animFX = this.animFX.getComponent('FXPlayer');\n        this.animFX.init();\n        this.animFX.show(false);\n\n    },\n\n    //更新总的钱数\n    updateTotalStake: function (num) {\n        this.labelTotalStake.string = '$' + num;\n    },\n\n    //开始倒计时\n    startCountdown: function () {\n        if (this.callCounter){\n            this.isCounting = true;\n            this.counterTimer = 0 ;\n        }\n    },\n\n    //重置计时器\n    resetCountdown: function () {\n        if (this.callCounter){\n            this.isCounting = false;\n            this.counterTimer = 0;\n            this.callCounter.progress = 0;\n        }\n    },\n\n    playBlackJackFX: function () {\n        this.animFX.playFX('blackjack');\n    },\n\n    playBustFX: function () {\n        this.animFX.playFX('bust');\n    },\n\n    onDeal: function (card, show){\n        var newCard = cc.instantiate(this.cardPrafab).getComponent('Card');\n        this.anchorCards.addChild(newCard.node);\n        newCard.init(card);\n        newCard.reveal(show);\n\n        var startPos = cc.p(0,0);\n        var index = this.actor.cards.length - 1;\n        var endPos = cc.p(this.cardSpace * index, 0);\n        newCard.node .setPosition(startPos);\n        this._updatePointPos(endPos.x);\n\n        var moveAction = cc.moveTo(0.5, endPos);\n        var callback = cc.callFunc(this._onDealEnd,this);\n        newCard.node.runAction(cc.sequence(moveAction, callback));\n    },\n\n    _onDealEnd: function (target) {\n        this.resetCountdown();\n        if (this.actor.state === ActorPlayingState.Normal){\n            this.startCountdown();\n        }\n        this.updatePoint();\n\n    },\n\n    onReset: function () {\n        this.cardInfo.active = false;\n        this.anchorCards.removeAllChildren();\n        this._resetChips();\n    },\n\n    onRevealHoldCard: function () {\n        var card = cc.find('cardPrefab', this.anchorCards).getComponent(\"Card\");\n        card.reveal(true);\n        this.updateState();\n    },\n\n    updatePoint: function () {\n        this.cardInfo.active = true;\n        this.labelCardInfo.string = this.actor.bestPoint;\n        switch (this.actor.hand){\n            case Types.Hand.BlackJack:\n                this.animFX.show(true);\n                this.animFX.playFX('blackjack');\n                break;\n            case Types.Hand.FiveCard:\n                break;\n        }\n    },\n\n    _updatePointPos: function (xPos) {\n        this.cardInfo.setPosition(xPos + 50, 0);\n    },\n\n    showStakeChips: function (stake) {\n        var chips = this.spChips;\n        var count = 0;\n        if (stake > 50000){\n            count = 5;\n        } else  if(stake > 25000){\n            count = 4;\n        } else if (stake > 10000){\n            count = 3;\n        } else if (stake > 5000){\n            count = 2;\n        } else if (stake > 0){\n            count = 1;\n        }\n\n        for (var i = 0; i < count; ++i){\n            chips[i].enabled = true;\n        }\n    },\n\n    _resetChips: function () {\n        for (var i = 0; i<this.spChips.length; ++i){\n            this.spChips.enabled = false;\n        }\n    },\n\n    updateState: function () {\n        switch (this.actor.state){\n            case ActorPlayingState.Normal:\n                this.cardInfo.Active = true;\n                this.spCardInfo.spriteFrame = Game.instance.assetMng.texCardInfo;\n                this.updatePoint();\n                break;\n            case ActorPlayingState.Bust:\n                var min = Utils.getMinMaxPoint(this.actor.cards).min;\n                this.labelCardInfo.string = '爆牌(' + min +')';\n                this.spCardInfo.spriteFrame = Game.instance.assetMng.texBust;\n                this.cardInfo.active = true;\n                this.animFX.show(true);\n                this.animFX.playFX('bust');\n                this.resetCountdown();\n                break;\n            case ActorPlayingState.Stand:\n                var max = Utils.getMinMaxPoint(this.actor.cards).max;\n                this.labelCardInfo.string = '停牌(' + max + ')';\n                this.spCardInfo.spriteFrame = Game.instance.assetMng.texCardInfo;\n                this.resetCountdown();\n                break;\n        }\n    }\n\n\n\n\n});\n"
  ]
}