{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [
    "Types",
    "require",
    "Utils",
    "ActorPlayingState",
    "cc",
    "Class",
    "extends",
    "Component",
    "properties",
    "cards",
    "default",
    "serializable",
    "visible",
    "holeCard",
    "seriablizable",
    "bestPoint",
    "get",
    "minMax",
    "getMinMaxPoint",
    "max",
    "hand",
    "count",
    "length",
    "Hand",
    "FiveCard",
    "BlackJack",
    "Normal",
    "canReport",
    "renderer",
    "type",
    "Node",
    "state",
    "notify",
    "oldState",
    "updateState",
    "init",
    "ready",
    "getComponent",
    "addCard",
    "card",
    "push",
    "onDeal",
    "concat",
    "isBust",
    "Bust",
    "addHoleCard",
    "stand",
    "Stand",
    "revealHoldCard",
    "unshift",
    "report",
    "Report",
    "reset",
    "reported",
    "onReset"
  ],
  "mappings": ";;AACA,IAAIA,QAAQC,QAAQ,OAAR,CAAZ;AACA,IAAIC,QAAQD,QAAQ,OAAR,CAAZ;AACA,IAAIE,oBAAoBH,MAAMG,iBAA9B;;AAEAC,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACR;AACA;AACAC,eAAO;AACHC,qBAAS,EADN;AAEHC,0BAAc,KAFX,EAEiB;AACpBC,qBAAS,KAHN,CAGW;AAHX,SAHC;AAQR;AACAC,kBAAU;AACNH,qBAAS,IADH;AAENI,2BAAe,KAFT;AAGNF,qBAAS;AAHH,SATF;AAcR;AACAG,mBAAW;AACPC,iBAAK,eAAY;AAAC;AACd,oBAAIC,SAASf,MAAMgB,cAAN,CAAqB,KAAKT,KAA1B,CAAb;AACA,uBAAOQ,OAAOE,GAAd;AACH;AAJM,SAfH;AAqBR;AACAC,cAAM;AACFJ,iBAAK,eAAY;AACb,oBAAIK,QAAQ,KAAKZ,KAAL,CAAWa,MAAvB;AACA,oBAAI,KAAKT,QAAT,EAAkB;AACd,sBAAEQ,KAAF;AACH;AACD,oBAAIA,SAAS,CAAb,EAAe;AACX,2BAAOrB,MAAMuB,IAAN,CAAWC,QAAlB,CADW,CACgB;AAC9B;AACD,oBAAIH,UAAU,CAAV,IAAe,KAAKN,SAAL,KAAmB,EAAtC,EAAyC;AACrC,2BAAOf,MAAMuB,IAAN,CAAWE,SAAlB,CADqC,CACT;AAC/B;AACD,uBAAOzB,MAAMuB,IAAN,CAAWG,MAAlB,CAXa,CAWY;AAC5B;AAbC,SAtBE;;AAsCRC,mBAAW;AACPX,iBAAK,eAAY;AACb,uBAAO,KAAKI,IAAL,KAAcpB,MAAMuB,IAAN,CAAWG,MAAhC;AACH,aAHM;AAIPd,qBAAS;AAJF,SAtCH;;AA6CRgB,kBAAU;AACNlB,qBAAS,IADH;AAENmB,kBAAMzB,GAAG0B;AAFH,SA7CF;AAiDRC,eAAO;AACHrB,qBAASP,kBAAkBuB,MADxB;AAEHM,oBAAQ,gBAAUC,QAAV,EAAoB;AAAC;AACzB,oBAAI,KAAKF,KAAL,KAAeE,QAAnB,EAA4B;AACxB,yBAAKL,QAAL,CAAcM,WAAd;AACH;AACJ,aANE;AAOHL,kBAAM1B,iBAPH;AAQHQ,0BAAc;AARX;AAjDC,KAHP;;AAgELwB,UAAM,gBAAY;AACd,aAAKC,KAAL,GAAa,IAAb;AACA,aAAKR,QAAL,GAAgB,KAAKS,YAAL,CAAkB,eAAlB,CAAhB;AACH,KAnEI;;AAqELC,aAAS,iBAAUC,IAAV,EAAgB;AACrB,aAAK9B,KAAL,CAAW+B,IAAX,CAAgBD,IAAhB;AACA,aAAKX,QAAL,CAAca,MAAd,CAAqBF,IAArB,EAA2B,IAA3B,EAFqB,CAEY;;AAEjC,YAAI9B,QAAQ,KAAKI,QAAL,GAAgB,CAAC,KAAKA,QAAN,EAAgB6B,MAAhB,CAAuB,KAAKjC,KAA5B,CAAhB,GAAqD,KAAKA,KAAtE,CAJqB,CAIuD;AAC5E,YAAIP,MAAMyC,MAAN,CAAalC,KAAb,CAAJ,EAAwB;AAAC;AACrB,iBAAKsB,KAAL,GAAa5B,kBAAkByC,IAA/B;AACH;AACJ,KA7EI;;AA+ELC,iBAAa,qBAAUN,IAAV,EAAgB;AACzB,aAAK1B,QAAL,GAAgB0B,IAAhB;AACA,aAAKX,QAAL,CAAca,MAAd,CAAqBF,IAArB,EAA0B,KAA1B;AACH,KAlFI;;AAoFLO,WAAO,iBAAY;AACf,aAAKf,KAAL,GAAa5B,kBAAkB4C,KAA/B,CADe,CACsB;AACxC,KAtFI;;AAwFL;AACAC,oBAAgB,0BAAY;AACxB,YAAI,KAAKnC,QAAT,EAAkB;AACd,iBAAKJ,KAAL,CAAWwC,OAAX,CAAmB,KAAKpC,QAAxB,EADc,CACoB;AACrC;AACJ,KA7FI;;AA+FLqC,YAAQ,kBAAY;AAChB,aAAKnB,KAAL,GAAa5B,kBAAkBgD,MAA/B;AACH,KAjGI;;AAmGLC,WAAO,iBAAY;AACf,aAAK3C,KAAL,GAAa,EAAb;AACA,aAAKI,QAAL,GAAgB,IAAhB;AACA,aAAKwC,QAAL,GAAgB,KAAhB;AACA,aAAKtB,KAAL,GAAa5B,kBAAkBuB,MAA/B;AACA,aAAKE,QAAL,CAAc0B,OAAd;AACH;;AAzGI,CAAT",
  "file": "unknown",
  "sourcesContent": [
    "\nvar Types = require('Types');\nvar Utils = require('Utils');\nvar ActorPlayingState = Types.ActorPlayingState;\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        //熟悉名称如果是下划线_开头的那么默认是不显示在属性面板上的，但可以设置visible：true来强制显示\n        //所有明牌\n        cards: {\n            default: [],\n            serializable: false,//不序列化  不设置的话是默认会被序列化的\n            visible: false//强制隐藏属性面板上的显示\n        },\n        //暗牌 demo 暂存\n        holeCard: {\n            default: null,\n            seriablizable: false,\n            visible: false\n        },\n        //手上最接近21点的点数（有可能超过21点）\n        bestPoint: {\n            get: function () {//设置了get方法，访问该属性的时候就能触发预定义的get或set方法，并且可以显示到属性检查器上\n                var minMax = Utils.getMinMaxPoint(this.cards);\n                return minMax.max;\n            }\n        },\n        //牌型，不考虑是否爆牌\n        hand: {\n            get: function () {\n                var count = this.cards.length;\n                if (this.holeCard){\n                    ++count;\n                }\n                if (count >= 5){\n                    return Types.Hand.FiveCard;//五小龙\n                }\n                if (count === 2 && this.bestPoint === 21){\n                    return Types.Hand.BlackJack;//\n                }\n                return Types.Hand.Normal;//普通牌型\n            }\n        },\n\n        canReport: {\n            get: function () {\n                return this.hand !== Types.Hand.Normal;\n            },\n            visible: false\n        },\n\n        renderer: {\n            default: null,\n            type: cc.Node\n        },\n        state: {\n            default: ActorPlayingState.Normal,\n            notify: function (oldState) {//当属性被赋值时触发制定方法 需要定义default 属性并且不能用于数组\n                if (this.state !== oldState){\n                    this.renderer.updateState();\n                }\n            },\n            type: ActorPlayingState,\n            serializable: false,\n        }\n    },\n\n    init: function () {\n        this.ready = true;\n        this.renderer = this.getComponent('ActorRenderer');\n    },\n\n    addCard: function (card) {\n        this.cards.push(card);\n        this.renderer.onDeal(card, true);//分配牌\n\n        var cards = this.holeCard ? [this.holeCard].concat(this.cards) : this.cards;//concat 将多个数组合并\n        if (Utils.isBust(cards)){//是否爆牌\n            this.state = ActorPlayingState.Bust;\n        }\n    },\n\n    addHoleCard: function (card) {\n        this.holeCard = card;\n        this.renderer.onDeal(card,false);\n    },\n\n    stand: function () {\n        this.state = ActorPlayingState.Stand;//停牌\n    },\n\n    //显示手中的牌\n    revealHoldCard: function () {\n        if (this.holeCard){\n            this.cards.unshift(this.holeCard);//unshift可向数组的开头添加一个或更多元素，并返回新的长度。\n        }\n    },\n\n    report: function () {\n        this.state = ActorPlayingState.Report;\n    },\n\n    reset: function () {\n        this.cards = [];\n        this.holeCard = null;\n        this.reported = false;\n        this.state = ActorPlayingState.Normal;\n        this.renderer.onReset();\n    }\n\n\n\n});\n"
  ]
}