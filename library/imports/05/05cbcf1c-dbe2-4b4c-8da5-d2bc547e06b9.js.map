{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [
    "Types",
    "require",
    "Decks",
    "numberOfDecks",
    "_numberOfDecks",
    "_cardIds",
    "Array",
    "reset",
    "prototype",
    "length",
    "index",
    "fromId",
    "Card",
    "i",
    "cardId",
    "draw",
    "cardIds",
    "len",
    "random",
    "Math",
    "result",
    "last"
  ],
  "mappings": ";;AAAA,IAAIA,QAAQC,QAAQ,OAAR,CAAZ;;AAEA;;;;;;AAMA,SAASC,KAAT,CAAeC,aAAf,EAA8B;AAC1B;AACA,SAAKC,cAAL,GAAsBD,aAAtB;AACA;AACA,SAAKE,QAAL,GAAgB,IAAIC,KAAJ,CAAUH,gBAAgB,EAA1B,CAAhB;;AAEA,SAAKI,KAAL;AACH;;AAED;;;;;AAKAL,MAAMM,SAAN,CAAgBD,KAAhB,GAAwB,YAAY;AAChC,SAAKF,QAAL,CAAcI,MAAd,GAAuB,KAAKL,cAAL,GAAsB,EAA7C;AACA,QAAIM,QAAQ,CAAZ;AACA,QAAIC,SAASX,MAAMY,IAAN,CAAWD,MAAxB;AACA,SAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAI,KAAKT,cAAzB,EAAyC,EAAES,CAA3C,EAA6C;AACzC,aAAK,IAAIC,SAAS,CAAlB,EAAqBA,SAAS,EAA9B,EAAkC,EAAGA,MAArC,EAA4C;AACxC,iBAAKT,QAAL,CAAcK,KAAd,IAAuBC,OAAOG,MAAP,CAAvB;AACA,cAAEJ,KAAF;AACH;AACJ;AACJ,CAVD;;AAYA;;;;;AAKAR,MAAMM,SAAN,CAAgBO,IAAhB,GAAuB,YAAY;AAC/B,QAAIC,UAAU,KAAKX,QAAnB;AACA,QAAIY,MAAMD,QAAQP,MAAlB;AACA,QAAIQ,QAAQ,CAAZ,EAAc;AACV,eAAO,IAAP;AACH;AACD,QAAIC,SAASC,KAAKD,MAAL,EAAb,CAN+B,CAMJ;AAC3B,QAAIR,QAASQ,SAASD,GAAV,GAAiB,CAA7B,CAP+B,CAOA;AAC/B,QAAIG,SAASJ,QAAQN,KAAR,CAAb;;AAEA;AACA,QAAIW,OAAOL,QAAQC,MAAK,CAAb,CAAX;AACAD,YAAQN,KAAR,IAAiBW,IAAjB;AACAL,YAAQP,MAAR,GAAiBQ,MAAK,CAAtB;;AAEA,WAAOG,MAAP;AACH,CAhBD",
  "file": "unknown",
  "sourcesContent": [
    "var Types = require('Types');\n\n/**\n * 扑克管理类，用来管理一副或多副牌\n * @class Decks\n * @constructor\n * @param {number} numberOfDecks - 总共几副牌\n */\nfunction Decks(numberOfDecks) {\n    //总共几副牌\n    this._numberOfDecks = numberOfDecks;\n    //还没发出去的牌\n    this._cardIds = new Array(numberOfDecks * 52);\n\n    this.reset();\n}\n\n/**\n * 重置所有牌\n * @method reset\n */\n\nDecks.prototype.reset = function () {\n    this._cardIds.length = this._numberOfDecks * 52;\n    var index = 0;\n    var fromId = Types.Card.fromId;\n    for (var i = 0; i < this._numberOfDecks; ++i){\n        for (var cardId = 0; cardId < 52; ++ cardId){\n            this._cardIds[index] = fromId(cardId);\n            ++index;\n        }\n    }\n};\n\n/**\n * 随机抽一张牌，如果已经没牌了，将返回 null\n * @method draw\n * @return {Card}\n */\nDecks.prototype.draw = function () {\n    var cardIds = this._cardIds;\n    var len = cardIds.length;\n    if (len === 0){\n        return null;\n    }\n    var random = Math.random();//Math.random()是令系统随机选取大于等于 0.0 且小于 1.0 的伪随机 double 值\n    var index = (random * len) | 0;//& | 位运算符： 先转换为2进制，然后按位进行与或比较\n    var result = cardIds[index];\n\n    //保持数组紧凑 将牌的最后一张用来弥补取走的那张牌\n    var last = cardIds[len -1];\n    cardIds[index] = last;\n    cardIds.length = len -1;\n\n    return result;\n};\n\n"
  ]
}